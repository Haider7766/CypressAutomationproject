trigger:
- main

pool:
  vmImage: 'windows-latest'

steps:
# 1) Install Node
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

# 2) Install dependencies
- script: npm ci
  displayName: 'Install dependencies'

# 3) Ensure folders exist (before running Cypress!)
- powershell: |
    New-Item -ItemType Directory -Force -Path "cypress/reports/mochawesome" | Out-Null
    New-Item -ItemType Directory -Force -Path "cypress/screenshots" | Out-Null
    New-Item -ItemType Directory -Force -Path "cypress/videos" | Out-Null
  displayName: 'Ensure report folders exist'
  condition: always()

# 4) Run Cypress tests (force reporter usage)
- script: npx cypress run --reporter cypress-multi-reporters --reporter-options configFile=reporter-config.json
  displayName: 'Run Cypress Tests'

# 5) Debug - list output files
- script: dir cypress\reports\mochawesome && dir cypress\screenshots && dir cypress\videos
  displayName: 'List Cypress output files'
  condition: always()

# 5b) Debug - find JSON reports in entire workspace
- script: npx mochawesome-merge cypress/reports/*.json > cypress/reports/mochawesome/merged-report.json
  displayName: 'Merge Mochawesome JSON and Generate HTML'
  condition: always()

# 6) Generate HTML with inline assets (FIXED!)
- script: npx marge cypress/reports/mochawesome/merged-report.json --reportDir cypress/reports/mochawesome --inline
  displayName: 'Generate Mochawesome HTML Report with Inline Assets'
  condition: always()

# 6b) Debug - Check generated HTML and assets
- powershell: |
    Write-Host "=== Generated HTML Files ==="
    Get-ChildItem -Path "cypress/reports/mochawesome" -Recurse -Include "*.html"
    
    Write-Host "`n=== Generated CSS Files ==="
    Get-ChildItem -Path "cypress/reports/mochawesome" -Recurse -Include "*.css"
    
    Write-Host "`n=== Generated JS Files ==="
    Get-ChildItem -Path "cypress/reports/mochawesome" -Recurse -Include "*.js"
    
    Write-Host "`n=== All Files in Report Directory ==="
    Get-ChildItem -Path "cypress/reports/mochawesome" -Recurse
    
    Write-Host "`n=== HTML File Size ==="
    $htmlFile = Get-ChildItem -Path "cypress/reports/mochawesome" -Include "*.html" -Recurse | Select-Object -First 1
    if ($htmlFile) {
        Write-Host "File: $($htmlFile.FullName)"
        Write-Host "Size: $($htmlFile.Length) bytes"
        
        # Check if HTML contains inline CSS/JS
        $content = Get-Content $htmlFile.FullName -Raw
        if ($content -match '<style>') {
            Write-Host "Inline CSS found"
        } else {
            Write-Host "No inline CSS found"
        }
        
        if ($content -match '<script>') {
            Write-Host "Inline JS found"
        } else {
            Write-Host "No inline JS found"
        }
        
        # Check for external references
        if ($content -match 'href="[^"]*\.css') {
            Write-Host "External CSS references found"
        }
        if ($content -match 'src="[^"]*\.js') {
            Write-Host "External JS references found"
        }
    }
  displayName: 'Debug - Check HTML Report Generation'
  condition: always()

# 6c) Alternative: Create self-contained HTML if inline doesn't work
- powershell: |
    $reportDir = "cypress/reports/mochawesome"
    $htmlFiles = Get-ChildItem -Path $reportDir -Include "*.html" -Recurse
    
    foreach ($htmlFile in $htmlFiles) {
        Write-Host "Processing: $($htmlFile.Name)"
        $content = Get-Content $htmlFile.FullName -Raw
        
        # Check if we need to inline assets
        if ($content -match 'href="app\.css"') {
            $cssFile = Join-Path $reportDir "app.css"
            if (Test-Path $cssFile) {
                $css = Get-Content $cssFile -Raw
                $content = $content -replace '<link[^>]*app\.css[^>]*>', "<style>$css</style>"
                Write-Host " Inlined CSS"
            } else {
                Write-Host " CSS file not found: $cssFile"
            }
        }
        
        if ($content -match 'src="app\.js"') {
            $jsFile = Join-Path $reportDir "app.js"
            if (Test-Path $jsFile) {
                $js = Get-Content $jsFile -Raw
                $content = $content -replace '<script[^>]*app\.js[^>]*></script>', "<script>$js</script>"
                Write-Host " Inlined JS"
            } else {
                Write-Host " JS file not found: $jsFile"
            }
        }
        
        # Save the modified HTML
        $content | Out-File -FilePath $htmlFile.FullName -Encoding UTF8
        Write-Host "Updated HTML file"
    }
  displayName: 'Inline CSS/JS into HTML (Fallback)'
  condition: always()

# 7) Publish Complete Mochawesome Report (with all assets)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'cypress/reports/mochawesome'
    ArtifactName: 'mochawesome-html-report'
    publishLocation: 'Container'
    failOnEmpty: false
  displayName: 'Publish Complete Mochawesome HTML Report'
  condition: always()

# 8) Publish Screenshots
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'cypress/screenshots'
    ArtifactName: 'cypress-screenshots'
    publishLocation: 'Container'
    failOnEmpty: false
  displayName: 'Publish Screenshots'
  condition: always()

# 9) Publish Videos
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'cypress/videos'
    ArtifactName: 'cypress-videos'
    publishLocation: 'Container'
    failOnEmpty: false
  displayName: 'Publish Videos'
  condition: always()

# 10) Publish JUnit Results (Azure Test Tab)
- task: PublishTestResults@2
  inputs:
    testResultsFiles: 'cypress/reports/junit/*.xml'
    testRunTitle: 'Cypress Test Results'
    mergeTestResults: true
  condition: always()